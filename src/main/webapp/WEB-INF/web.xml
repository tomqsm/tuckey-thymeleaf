<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.1" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd">
    <display-name>tuckey-thymeleaf</display-name>
    <!-- T U C K E Y  U R L  R E W R I T E R  F I L T E R  -->
    <filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
        <!-- set the amount of seconds the conf file will be checked for reload
  can be a valid integer (0 denotes check every time,
        empty/not set denotes no reload check) -->
        <init-param>
            <param-name>confReloadCheckInterval</param-name>
            <param-value>0</param-value>
        </init-param>
        <!-- sets up log level (will be logged to context log)
  can be: TRACE, DEBUG, INFO (default), WARN, ERROR, FATAL, log4j, commons, sysout:{level} (ie, sysout:DEBUG)
        if you are having trouble using normal levels use sysout:DEBUG -->
        <init-param>
            <description>Logging level: debug, info</description>
            <param-name>logLevel</param-name>
            <param-value>WARN</param-value>
        </init-param>
        <!-- you can change status path so that it does not
        conflict with your installed apps (note, defaults
        to /rewrite-status) note, must start with / -->
        <init-param>
            <param-name>statusPath</param-name>
            <param-value>/status</param-value>
        </init-param>
        <!-- you can disable status page if desired
        can be: true, false (default true) -->
        <init-param>
            <param-name>statusEnabled</param-name>
            <param-value>false</param-value>
        </init-param>
        <async-supported>true</async-supported>
    </filter>
    <servlet>
        <description>Rest/Json templating.</description>
        <servlet-name>freemarkerForJson</servlet-name>
        <servlet-class>freemarker.ext.servlet.FreemarkerServlet</servlet-class>
        <async-supported>true</async-supported>
        <!-- FreemarkerServlet settings: -->
        <init-param>
            <param-name>TemplatePath</param-name>
            <param-value>rest/json</param-value>
        </init-param>
        <init-param>
            <!--If set to true, generates headers in the response that advise the HTTP client not to cache the returned page. The default is false.-->
            <param-name>NoCache</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>ContentType</param-name>
            <param-value>application/json; charset=UTF-8</param-value>
            <!-- Forces UTF-8 output encoding! -->
        </init-param>
        <init-param>
            <param-name>template_exception_handler</param-name>
            <!-- Some may prefer "html_debug" for development. -->
            <!--<param-value>rethrow</param-value>-->
            <param-value>html_debug</param-value>
        </init-param>
        <init-param>
            <param-name>template_update_delay</param-name>
            <param-value>10</param-value>
            <!-- 0 is for development only! Use higher value otherwise. -->
        </init-param>
        <init-param>
            <param-name>default_encoding</param-name>
            <param-value>UTF-8</param-value>
            <!-- The encoding of the template files. -->
        </init-param>
        <init-param>
            <param-name>number_format</param-name>
            <param-value>0.##########</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>freemarkerForJson</servlet-name>
        <url-pattern>*.ftl</url-pattern>
    </servlet-mapping>
    <filter>
        <filter-name>ThymeleafTemplateLoaderFilter</filter-name>
        <filter-class>biz.letsweb.tuckey.thymeleaf.servlets.ThymeleafTemplateLoaderFilter</filter-class>
        <init-param>
            <param-name>setPrefix</param-name>
            <param-value>/html/</param-value>
        </init-param>
        <init-param>
            <param-name>setSuffix</param-name>
            <param-value>.html</param-value>
        </init-param>
        <init-param>
            <param-name>setTemplateMode</param-name>
            <param-value>HTML5</param-value>
        </init-param>
        <init-param>
            <param-name>setCacheTTLMs</param-name>
            <param-value>3600000</param-value>
        </init-param>
    </filter>    

    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
    <filter-mapping>
        <filter-name>ThymeleafTemplateLoaderFilter</filter-name>
        <!--
        Add servlets names for which you want to load the thymeleaf template.
        This filter starts on forwards of traffic from UrlRewriteFilter.
        It also handles error dispatching from the container.
        -->
        <servlet-name>index</servlet-name>
        <servlet-name>error</servlet-name>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>
    <listener>
        <description>ServletContextListener</description>
        <listener-class>biz.letsweb.tuckey.thymeleaf.lifecycle.WebbAppListener</listener-class>
    </listener>
    <!--    <resource-ref>
        <description>JNDI data source resource.</description>
        <res-ref-name>${filter.jndiDsName}</res-ref-name>
        <res-type>javax.sql.DataSource</res-type>
        <res-auth>Container</res-auth>
    </resource-ref>-->
    <security-constraint>
        <web-resource-collection>
            <web-resource-name>Prevent access to restricted Servlets</web-resource-name>
            <url-pattern>/error-servlet</url-pattern>
        </web-resource-collection>
        <auth-constraint/>
    </security-constraint>
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/error</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/error</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/error</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/error</location>
    </error-page>
</web-app>
